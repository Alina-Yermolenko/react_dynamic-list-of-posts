{"version":3,"sources":["utils/fetchClient.ts","components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","PostsList","post","setPost","userPosts","detailsSeen","setDetailsSeen","setIsLoadingComments","setPostComments","textInButton","singlePost","id","getPost","usersResponse","usersResult","Array","isArray","filter","comment","postId","Error","className","map","title","type","onClick","Loader","NewCommentForm","comments","setComments","postComments","useState","authorName","setAuthorName","authorEmail","setAuthorEmail","commentBody","setCommentBody","noName","setNoName","noEmail","setNoEmail","noBody","setNoBody","isLoadingButton","setIsLoadingButton","addComment","a","length","commentResponse","name","email","commentResult","htmlFor","placeholder","value","onChange","e","target","PostDetails","isLoadingComments","isSeen","setIsSeen","isError","setIsError","deleteComment","one","useEffect","href","UserSelector","selectedUser","users","setUser","setPosts","getDataFromApi","setIsLoading","dropdownValue","setDropdownValue","isDropdownVisible","setIsDropdownVisible","getUserPosts","event","user","preventDefault","onBlur","role","String","App","setUsers","undefined","posts","setUserPosts","isLoading","pathname","setData","p","userId","classNames","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.411a69f0.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React from 'react';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\ntype Props = {\n  post: Post | undefined,\n  setPost: (value: Post) => void,\n  userPosts: Post[],\n  detailsSeen: boolean,\n  setDetailsSeen: (value: boolean) => void,\n  setPostComments: (value: Comment[]) => void,\n  setIsLoadingComments: (value: boolean) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  post, setPost, userPosts, detailsSeen, setDetailsSeen,\n  setIsLoadingComments, setPostComments,\n}) => {\n  const textInButton = (singlePost: Post) => {\n    if (!post) {\n      return 'Open';\n    }\n\n    return detailsSeen && post.id === singlePost.id ? 'Close' : 'Open';\n  };\n\n  const getPost = async (singlePost: Post) => {\n    setIsLoadingComments(true);\n    try {\n      const usersResponse = client.get('/comments');\n      const usersResult = await usersResponse;\n\n      if (Array.isArray(usersResult) && usersResult) {\n        await setPostComments(usersResult.filter(\n          (comment: Comment) => comment.postId === singlePost.id,\n        ));\n      }\n    } catch (error) {\n      throw Error('An error occured');\n    }\n\n    setIsLoadingComments(false);\n\n    setPost(singlePost);\n    setDetailsSeen(true);\n\n    if (post && detailsSeen && post.id === singlePost.id) {\n      setDetailsSeen(false);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {\n            userPosts.map((singlePost: Post) => {\n              return (\n                <tr data-cy=\"Post\" key={singlePost.id}>\n                  <td data-cy=\"PostId\">{singlePost.id}</td>\n                  <td data-cy=\"PostTitle\">\n                    {singlePost.title}\n                  </td>\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      type=\"button\"\n                      data-cy=\"PostButton\"\n                      className={`button is-link \n                      ${textInButton(singlePost) === 'Open' && 'is-light'}`}\n                      onClick={() => {\n                        getPost(singlePost);\n                      }}\n                    >\n                      {textInButton(singlePost)}\n                    </button>\n                  </td>\n                </tr>\n              );\n            })\n\n          }\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\ntype Props = {\n  post: Post,\n  comments: Comment[],\n  setComments: (value: Comment[] | any)=> void,\n  setPostComments: (value: Comment[] | any)=> void,\n  postComments: Comment[],\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  post, comments, setComments, setPostComments, postComments,\n}) => {\n  const [authorName, setAuthorName] = useState('');\n  const [authorEmail, setAuthorEmail] = useState('');\n  const [commentBody, setCommentBody] = useState('');\n  const [noName, setNoName] = useState(false);\n  const [noEmail, setNoEmail] = useState(false);\n  const [noBody, setNoBody] = useState(false);\n  const [isLoadingButton, setIsLoadingButton] = useState(false);\n  const clearInputs = () => {\n    setAuthorName('');\n    setAuthorEmail('');\n    setCommentBody('');\n  };\n\n  const addComment = async () => {\n    if (authorName.length <= 0) {\n      setNoName(true);\n\n      return;\n    }\n\n    if (authorEmail.length <= 0) {\n      setNoEmail(true);\n\n      return;\n    }\n\n    if (commentBody.length <= 0) {\n      setNoBody(true);\n\n      return;\n    }\n\n    setIsLoadingButton(true);\n    const commentResponse = client.post('/comments', {\n      postId: post.id,\n      name: authorName,\n      email: authorEmail,\n      body: commentBody,\n    });\n    const commentResult = await commentResponse;\n\n    setComments([...comments, commentResult]);\n    setPostComments([...postComments, commentResult]);\n    setCommentBody('');\n    setIsLoadingButton(false);\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={`input ${noName && 'is-danger'}`}\n            value={authorName}\n            onChange={(e) => {\n              setNoName(false);\n              setAuthorName(e.target.value);\n            }}\n          />\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n          {\n            noName\n          && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )\n          }\n        </div>\n\n        {noName\n          && (\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              Name is required\n            </p>\n          )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={`input ${noEmail && 'is-danger'}`}\n            value={authorEmail}\n            onChange={(e) => {\n              setNoEmail(false);\n              setAuthorEmail(e.target.value);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n          {noEmail\n          && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          ) }\n        </div>\n\n        {noEmail\n        && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={`textarea ${noBody && 'is-danger'}`}\n            value={commentBody}\n            onChange={(e) => {\n              setNoBody(false);\n              setCommentBody(e.target.value);\n            }}\n          />\n        </div>\n        {noBody\n        && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        ) }\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            onClick={() => {\n              addComment();\n            }}\n            type=\"button\"\n            className={`button is-link ${isLoadingButton && 'is-loading'}`}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={clearInputs}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n// import { User } from '../types/User';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  post: Post,\n  comments: Comment[],\n  postComments: Comment[],\n  isLoadingComments: boolean,\n  setComments: (value: Comment[])=> void,\n  setPostComments: (value: Comment[])=> void,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  post, comments, setComments,\n  isLoadingComments,\n  postComments, setPostComments,\n}) => {\n  const [isSeen, setIsSeen] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const deleteComment = async (comment: Comment) => {\n    const response = client.delete(`/comments/${comment.id}`);\n    const result = await response;\n\n    if (result === 1) {\n      setComments(comments.filter((one: Comment) => one.id !== comment.id));\n      setPostComments(postComments.filter(\n        (one: Comment) => one.id !== comment.id,\n      ));\n\n      return;\n    }\n\n    setIsError(true);\n  };\n\n  useEffect(() => {\n    setIsSeen(false);\n  }, [post]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            #\n            {post.id}\n            :\n            {' '}\n            {post.title}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post.body}\n          </p>\n        </div>\n\n        {isLoadingComments && <Loader />}\n        {!isLoadingComments\n        && (\n          <div className=\"block\">\n\n            {isError && (\n              <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                Something went wrong\n              </div>\n            )}\n\n            {postComments.length > 0\n               && (\n                 <>\n                   <p className=\"title is-4\">Comments:</p>\n                   {postComments.map((comment: Comment) => {\n                     return (\n                       <article\n                         key={comment.id}\n                         className=\"message is-small\"\n                         data-cy=\"Comment\"\n                       >\n                         <div className=\"message-header\">\n                           <a\n                             href={`mailto:${comment.email}`}\n                             data-cy=\"CommentAuthor\"\n                           >\n                             {comment.name}\n                           </a>\n                           <button\n                             data-cy=\"CommentDelete\"\n                             type=\"button\"\n                             className=\"delete is-small\"\n                             aria-label=\"delete\"\n                             onClick={() => {\n                               deleteComment(comment);\n                             }}\n                           >\n                             delete button\n                           </button>\n                         </div>\n\n                         <div className=\"message-body\" data-cy=\"CommentBody\">\n                           {comment.body}\n                         </div>\n                       </article>\n                     );\n                   })}\n                 </>\n               )}\n\n            {postComments.length === 0 && (\n              <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                No comments yet\n              </p>\n            )}\n            {!isSeen\n            && (\n              <button\n                data-cy=\"WriteCommentButton\"\n                type=\"button\"\n                className=\"button is-link\"\n                onClick={() => {\n                  setIsSeen(true);\n                }}\n              >\n                Write a comment\n              </button>\n            )}\n          </div>\n        )}\n        {\n          isSeen && (\n            <NewCommentForm\n              post={post}\n              comments={comments}\n              setComments={setComments}\n              setPostComments={setPostComments}\n              postComments={postComments}\n            />\n          )\n        }\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\n\ntype Props = {\n  selectedUser:User | null,\n  users:User[],\n  setUser: (value: User)=> void,\n  setPosts:(value: Post[])=> void,\n  getDataFromApi: (value1: string, value2:(value: Post[])=> void) => void,\n  setDetailsSeen: (value: boolean)=> void,\n  setIsLoading: (value: boolean)=> void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  selectedUser, users, setUser,\n  setPosts, getDataFromApi, setDetailsSeen, setIsLoading,\n}) => {\n  const [dropdownValue, setDropdownValue] = useState('Choose a user');\n  const [isDropdownVisible, setIsDropdownVisible] = useState(false);\n\n  const getUserPosts = async (\n    event: React.MouseEvent<HTMLAnchorElement, MouseEvent>, user: User,\n  ) => {\n    event.preventDefault();\n    setIsDropdownVisible(false);\n\n    if (user.name === dropdownValue) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    setDetailsSeen(false);\n\n    await getDataFromApi('/posts', setPosts);\n    setDropdownValue(user.name);\n    setUser(user);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={`dropdown ${isDropdownVisible && 'is-active'}`}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => {\n            setIsDropdownVisible(!isDropdownVisible);\n          }}\n          onBlur={() => {\n            setTimeout(() => {\n              setIsDropdownVisible(false);\n            }, 500);\n          }}\n        >\n          <span>{dropdownValue}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n      >\n        <div className=\"dropdown-content\">\n          {\n            users.map((user: User) => {\n              return (\n                <a\n                  href={String(user.id)}\n                  className={`dropdown-item ${selectedUser && selectedUser.id === user.id && 'is-active'}`}\n                  onClick={(event) => {\n                    getUserPosts(event, user);\n                  }}\n                  key={user.id}\n                >\n                  {user.name}\n                </a>\n              );\n            })\n          }\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\n\nimport { client } from './utils/fetchClient';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\n\nexport const App: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const [users, setUsers] = useState([]);\n  const [post, setPost] = useState<Post | undefined>(undefined);\n  const [posts, setPosts] = useState<Post[] | any>([]);\n  const [userPosts, setUserPosts] = useState([]);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [detailsSeen, setDetailsSeen] = useState(false);\n  const [isLoadingComments, setIsLoadingComments] = useState(false);\n  const [postComments, setPostComments] = useState<Comment[]>([]);\n\n  const getDataFromApi = async (\n    pathname: string,\n    setData: (value: any) => void,\n  ) => {\n    try {\n      const usersResponse = client.get(pathname);\n      const usersResult = await usersResponse;\n\n      setData(usersResult);\n    } catch (error) {\n      setIsError(true);\n      throw new Error('An error occured');\n    }\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    getDataFromApi('/users', setUsers);\n    setIsLoading(false);\n  }, []);\n\n  useEffect(() => {\n    if (!user) {\n      return;\n    }\n\n    setUserPosts(posts.filter((p: Post) => p.userId === user.id));\n    setIsLoading(false);\n  }, [user]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  selectedUser={user}\n                  users={users}\n                  setUser={setUser}\n                  getDataFromApi={getDataFromApi}\n                  setPosts={setPosts}\n                  setDetailsSeen={setDetailsSeen}\n                  setIsLoading={setIsLoading}\n                />\n              </div>\n              <div className=\"block\" data-cy=\"MainContent\">\n                {isLoading && <Loader />}\n                {isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n                {user && userPosts.length === 0 && !isLoading && !isError && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n                {user && !isError && userPosts.length > 0 && !isLoading && (\n                  <PostsList\n                    post={post}\n                    setPost={setPost}\n                    userPosts={userPosts}\n                    detailsSeen={detailsSeen}\n                    setDetailsSeen={setDetailsSeen}\n                    setIsLoadingComments={setIsLoadingComments}\n                    setPostComments={setPostComments}\n                  />\n                )}\n                {!user && !isError && !isLoading && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {post\n            && (\n              <div\n                data-cy=\"Sidebar\"\n                className={classNames(\n                  'tile',\n                  'is-parent',\n                  'is-8-desktop',\n                  'Sidebar',\n                  'Sidebar--open',\n                )}\n              >\n                {detailsSeen\n                  && (\n                    <div className=\"tile is-child box is-success \">\n                      <PostDetails\n                        post={post}\n                        comments={comments}\n                        setComments={setComments}\n                        isLoadingComments={isLoadingComments}\n                        postComments={postComments}\n                        setPostComments={setPostComments}\n                      />\n                    </div>\n                  )}\n              </div>\n            )}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}