{"version":3,"sources":["utils/fetchClient.ts","components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/SingleComment.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","PostsList","post","setPost","userPosts","detailsSeen","setDetailsSeen","setIsLoadingComments","setPostComments","setIsError","textInButton","singlePost","id","getPost","usersResponse","usersResult","Array","isArray","filter","comment","postId","Error","String","className","map","title","type","onClick","Loader","NewCommentForm","comments","setComments","postComments","useState","authorName","setAuthorName","authorEmail","setAuthorEmail","commentBody","setCommentBody","noName","setNoName","noEmail","setNoEmail","noBody","setNoBody","isLoadingButton","setIsLoadingButton","addComment","a","length","commentResponse","name","email","commentResult","setInputValue","event","setNoValue","setAuthorValue","target","value","htmlFor","placeholder","onChange","e","SingleComment","deleteComment","singleComment","one","href","PostDetails","isLoadingComments","isSeen","setIsSeen","isError","useEffect","UserSelector","selectedUser","users","setUser","setPosts","setIsLoading","dropdownValue","setDropdownValue","isDropdownVisible","setIsDropdownVisible","getPostsFromApi","getUserPosts","user","preventDefault","onBlur","timeoutID","clearTimeout","role","App","setUsers","posts","setUserPosts","isLoading","noPostsYet","userHasPosts","getUsersFromApi","pathname","setData","filteredPosts","p","userId","classNames","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0b27d22b.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React from 'react';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\ntype Props = {\n  post: Post | null,\n  setPost: (value: Post) => void,\n  userPosts: Post[],\n  detailsSeen: boolean,\n  setDetailsSeen: (value: boolean) => void,\n  setPostComments: (value: Comment[]) => void,\n  setIsLoadingComments: (value: boolean) => void,\n  setIsError: (value: boolean) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  post, setPost, userPosts, detailsSeen, setDetailsSeen,\n  setIsLoadingComments, setPostComments, setIsError,\n}) => {\n  const textInButton = (singlePost: Post) => {\n    if (!post) {\n      return 'Open';\n    }\n\n    return detailsSeen && post.id === singlePost.id ? 'Close' : 'Open';\n  };\n\n  const getPost = async (singlePost: Post) => {\n    setIsLoadingComments(true);\n    setDetailsSeen(true);\n    setPost(singlePost);\n    try {\n      const usersResponse = client.get('/comments');\n      const usersResult = await usersResponse;\n\n      if (Array.isArray(usersResult) && usersResult) {\n        await setPostComments(usersResult.filter(\n          (comment: Comment) => comment.postId === singlePost.id,\n        ));\n      }\n    } catch (error) {\n      setIsLoadingComments(false);\n      setIsError(true);\n      if (error) {\n        throw new Error(String(error));\n      }\n    }\n\n    setIsLoadingComments(false);\n\n    if (post && detailsSeen && post.id === singlePost.id) {\n      setDetailsSeen(false);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n        <tbody>\n          {userPosts.map((singlePost: Post) => {\n            return (\n              <tr data-cy=\"Post\" key={singlePost.id}>\n                <td data-cy=\"PostId\">{singlePost.id}</td>\n                <td data-cy=\"PostTitle\">\n                  {singlePost.title}\n                </td>\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={`button is-link \n                      ${textInButton(singlePost) === 'Open' && 'is-light'}`}\n                    onClick={() => {\n                      getPost(singlePost);\n                    }}\n                  >\n                    {textInButton(singlePost)}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { ChangeEvent, useState } from 'react';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\ntype Props = {\n  post: Post,\n  comments: Comment[],\n  setComments: (value: Comment[]) => void,\n  setPostComments: (value: Comment[])=> void,\n  postComments: Comment[],\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  post, comments, setComments, setPostComments, postComments,\n}) => {\n  const [authorName, setAuthorName] = useState('');\n  const [authorEmail, setAuthorEmail] = useState('');\n  const [commentBody, setCommentBody] = useState('');\n  const [noName, setNoName] = useState(false);\n  const [noEmail, setNoEmail] = useState(false);\n  const [noBody, setNoBody] = useState(false);\n  const [isLoadingButton, setIsLoadingButton] = useState(false);\n  const clearInputs = () => {\n    setAuthorName('');\n    setAuthorEmail('');\n    setCommentBody('');\n  };\n\n  const addComment = async () => {\n    if (authorName.length <= 0) {\n      setNoName(true);\n\n      return;\n    }\n\n    if (authorEmail.length <= 0) {\n      setNoEmail(true);\n\n      return;\n    }\n\n    if (commentBody.length <= 0) {\n      setNoBody(true);\n\n      return;\n    }\n\n    setIsLoadingButton(true);\n    const commentResponse = client.post('/comments', {\n      postId: post.id,\n      name: authorName,\n      email: authorEmail,\n      body: commentBody,\n    });\n    const commentResult = await commentResponse as Comment;\n\n    setComments([...comments, commentResult]);\n    setPostComments([...postComments, commentResult]);\n    setCommentBody('');\n    setIsLoadingButton(false);\n  };\n\n  const setInputValue = (\n    event: ChangeEvent<HTMLInputElement> | ChangeEvent<HTMLTextAreaElement>,\n    setNoValue: (value: boolean)=> void,\n    setAuthorValue:(value: string)=> void,\n  ) => {\n    setNoValue(false);\n    setAuthorValue(event.target.value);\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={`input ${noName && 'is-danger'}`}\n            value={authorName}\n            onChange={(e) => {\n              setInputValue(e, setNoName, setAuthorName);\n            }}\n          />\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n          {noName && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n        {noName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={`input ${noEmail && 'is-danger'}`}\n            value={authorEmail}\n            onChange={(e) => {\n              setInputValue(e, setNoEmail, setAuthorEmail);\n            }}\n          />\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n          {noEmail && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          ) }\n        </div>\n        {noEmail && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={`textarea ${noBody && 'is-danger'}`}\n            value={commentBody}\n            onChange={(e) => {\n              setInputValue(e, setNoBody, setCommentBody);\n            }}\n          />\n        </div>\n        {noBody && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        ) }\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            onClick={addComment}\n            type=\"button\"\n            className={`button is-link ${isLoadingButton && 'is-loading'}`}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={clearInputs}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\ntype Props = {\n  comment: Comment,\n  comments: Comment[],\n  postComments: Comment[],\n  setComments: (value: Comment[])=> void,\n  setPostComments: (value: Comment[])=> void,\n  setIsError: (value: boolean)=> void,\n};\n\nexport const SingleComment:React.FC<Props> = ({\n  comment,\n  comments,\n  setComments,\n  postComments,\n  setPostComments,\n  setIsError,\n}) => {\n  const {\n    id, email, name, body,\n  } = comment;\n\n  const deleteComment = async (singleComment: Comment) => {\n    try {\n      const response = client.delete(`/comments/${singleComment.id}`);\n      const result = await response;\n\n      if (result === 1) {\n        setComments(comments.filter(\n          (one: Comment) => one.id !== singleComment.id,\n        ));\n        setPostComments(postComments.filter(\n          (one: Comment) => one.id !== singleComment.id,\n        ));\n        setIsError(false);\n\n        return;\n      }\n    } catch (error) {\n      setIsError(true);\n      setTimeout(() => {\n        setIsError(false);\n      }, 3000);\n      if (error) {\n        throw new Error(String(error));\n      }\n    }\n  };\n\n  return (\n    <article\n      key={id}\n      className=\"message is-small\"\n      data-cy=\"Comment\"\n    >\n      <div className=\"message-header\">\n        <a\n          href={`mailto:${email}`}\n          data-cy=\"CommentAuthor\"\n        >\n          {name}\n        </a>\n        <button\n          data-cy=\"CommentDelete\"\n          type=\"button\"\n          className=\"delete is-small\"\n          aria-label=\"delete\"\n          onClick={() => {\n            deleteComment(comment);\n          }}\n        >\n          delete button\n        </button>\n      </div>\n\n      <div className=\"message-body\" data-cy=\"CommentBody\">\n        {body}\n      </div>\n    </article>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { SingleComment } from './SingleComment';\n\ntype Props = {\n  post: Post,\n  comments: Comment[],\n  postComments: Comment[],\n  isLoadingComments: boolean,\n  setComments: (value: Comment[])=> void,\n  setPostComments: (value: Comment[])=> void,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  post,\n  comments,\n  setComments,\n  isLoadingComments,\n  postComments,\n  setPostComments,\n}) => {\n  const { id, title, body } = post;\n  const [isSeen, setIsSeen] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    setIsSeen(false);\n  }, [post]);\n\n  return (\n    <>\n      {post && <div>aasassasa</div>}\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"content\" data-cy=\"PostDetails\">\n          <div className=\"block\">\n            <h2 data-cy=\"PostTitle\">\n              {`# ${id}: ${title}`}\n            </h2>\n            <p data-cy=\"PostBody\">\n              {body}\n            </p>\n          </div>\n\n          {isLoadingComments && <Loader />}\n          {!isLoadingComments && (\n            <div className=\"block\">\n              {isError && (\n                <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                  Something went wrong\n                </div>\n              )}\n\n              {postComments.length > 0 && (\n                <>\n                  <p className=\"title is-4\">Comments:</p>\n                  {postComments.map((comment: Comment) => {\n                    return (\n                      <SingleComment\n                        comment={comment}\n                        comments={comments}\n                        setComments={setComments}\n                        postComments={postComments}\n                        setPostComments={setPostComments}\n                        setIsError={setIsError}\n                      />\n                    );\n                  })}\n                </>\n              )}\n\n              {postComments.length === 0 && (\n                <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                  No comments yet\n                </p>\n              )}\n              {!isSeen && (\n                <button\n                  data-cy=\"WriteCommentButton\"\n                  type=\"button\"\n                  className=\"button is-link\"\n                  onClick={() => {\n                    setIsSeen(true);\n                  }}\n                >\n                  Write a comment\n                </button>\n              )}\n            </div>\n          )}\n          {isSeen && (\n            <NewCommentForm\n              post={post}\n              comments={comments}\n              setComments={setComments}\n              setPostComments={setPostComments}\n              postComments={postComments}\n            />\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\ntype Props = {\n  selectedUser:User | null,\n  users:User[],\n  setUser: (value: User)=> void,\n  setPosts:(value: Post[])=> void,\n  setDetailsSeen: (value: boolean)=> void,\n  setIsLoading: (value: boolean)=> void,\n  setIsError: (value: boolean)=> void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  selectedUser, users, setUser, setIsError,\n  setPosts, setDetailsSeen, setIsLoading,\n}) => {\n  const [dropdownValue, setDropdownValue] = useState('Choose a user');\n  const [isDropdownVisible, setIsDropdownVisible] = useState(false);\n\n  const getPostsFromApi = async () => {\n    try {\n      const response = await client.get('/posts');\n\n      if (Array.isArray(response)) {\n        await setPosts(response);\n      }\n\n      setIsError(false);\n    } catch (error) {\n      setIsLoading(false);\n      setIsError(true);\n      if (error) {\n        throw new Error(String(error));\n      }\n    }\n  };\n\n  const getUserPosts = async (\n    event: React.MouseEvent<HTMLAnchorElement, MouseEvent>, user: User,\n  ) => {\n    event.preventDefault();\n    setIsDropdownVisible(false);\n\n    if (user.name === dropdownValue) {\n      return;\n    }\n\n    setIsLoading(true);\n    setDetailsSeen(false);\n    await getPostsFromApi();\n    setDropdownValue(user.name);\n    setUser(user);\n  };\n\n  const hideDropdown = () => {\n    const timeoutID = setTimeout(() => {\n      setIsDropdownVisible(false);\n    }, 500);\n\n    return () => {\n      clearTimeout(timeoutID);\n    };\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={`dropdown ${isDropdownVisible && 'is-active'}`}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => {\n            setIsDropdownVisible(!isDropdownVisible);\n          }}\n          onBlur={hideDropdown}\n        >\n          <span>{dropdownValue}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n      >\n        <div className=\"dropdown-content\">\n          {\n            users.map((user: User) => {\n              return (\n                <a\n                  href={String(user.id)}\n                  className={`dropdown-item ${selectedUser && selectedUser.id === user.id && 'is-active'}`}\n                  onClick={(event) => {\n                    getUserPosts(event, user);\n                  }}\n                  key={user.id}\n                >\n                  {user.name}\n                </a>\n              );\n            })\n          }\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\n\nimport { client } from './utils/fetchClient';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\n\nexport const App: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const [users, setUsers] = useState<User[]>([]);\n  const [post, setPost] = useState<Post | null>(null);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [userPosts, setUserPosts] = useState<Post[]>([]);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [detailsSeen, setDetailsSeen] = useState(false);\n  const [isLoadingComments, setIsLoadingComments] = useState(false);\n  const [postComments, setPostComments] = useState<Comment[]>([]);\n  const noPostsYet = user && !userPosts.length && !isLoading && !isError;\n  const userHasPosts = !isError && userPosts.length > 0 && !isLoading;\n\n  const getUsersFromApi = async (\n    pathname: string,\n    setData: (value: User[]) => void,\n  ) => {\n    try {\n      const response = await client.get(pathname);\n\n      if (Array.isArray(response)) {\n        setData(response);\n      }\n\n      setIsError(false);\n    } catch (error) {\n      setIsLoading(false);\n      setIsError(true);\n      if (error) {\n        throw new Error(String(error));\n      }\n    }\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    getUsersFromApi('/users', setUsers);\n    setIsLoading(false);\n  }, []);\n\n  useEffect(() => {\n    if (!user) {\n      return;\n    }\n\n    const filteredPosts = posts.filter((p: Post) => p.userId === user.id);\n\n    setUserPosts(filteredPosts);\n    setIsLoading(false);\n  }, [user]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  selectedUser={user}\n                  users={users}\n                  setUser={setUser}\n                  setPosts={setPosts}\n                  setDetailsSeen={setDetailsSeen}\n                  setIsLoading={setIsLoading}\n                  setIsError={setIsError}\n                />\n              </div>\n              <div className=\"block\" data-cy=\"MainContent\">\n                {isLoading && <Loader />}\n                {!user && !isError && !isLoading && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n                {isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n                {noPostsYet && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n                {userHasPosts && (\n                  <PostsList\n                    post={post}\n                    setPost={setPost}\n                    userPosts={userPosts}\n                    detailsSeen={detailsSeen}\n                    setDetailsSeen={setDetailsSeen}\n                    setIsLoadingComments={setIsLoadingComments}\n                    setPostComments={setPostComments}\n                    setIsError={setIsError}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          {post && (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                'Sidebar--open',\n              )}\n            >\n              {detailsSeen && (\n                <div className=\"tile is-child box is-success \">\n                  <PostDetails\n                    post={post}\n                    comments={comments}\n                    setComments={setComments}\n                    isLoadingComments={isLoadingComments}\n                    postComments={postComments}\n                    setPostComments={setPostComments}\n                  />\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}